#!/usr/bin/env ruby
#:cal SetSyn("Ruby")

Dir.chdir File.dirname(__FILE__)

$config = {
}

require 'bundler'
Bundler.require 
class WebViewWindow
    attr_accessor :window, :screen, :webview
    def initialize config={}
        @window = Gtk::Window.new :toplevel
        @window.set_title "Toxin - Chat"
	#@window.set_type_hint 6
        #@window.set_decorated false
        @screen = @window.get_screen
        @webview = WebKit::WebView.new
        @scroll = Gtk::ScrolledWindow.new nil, nil
        @window.add @scroll
        @scroll.add @webview
        GObject.signal_connect(@window, "destroy") { Gtk.main_quit }
        transparent
        @config = config
	post_init
    end
    # TODO: This doesn't work and I don't know why.
    def transparent
        visual = @screen.get_rgba_visual()
        @window.set_visual visual
        @scroll.set_visual visual
        @webview.set_transparent true
    end
    def erb path
        erb = Erubis::Eruby.new(File.read("views/#{path.to_s}.erb"))
        result = erb.result(binding())
        @window.show_all
        @webview.load_html_string(result, "file://#{File.absolute_path("./web/#{path.to_s}")}")
    end
    def post_init config
    end
    def destroy
        @window.destroy
    end
    def animate_move x, y, time
        start = Time.new
        pos = @window.get_position
        anim_tick = proc do
            time_since = Time.new - start
            if time_since >= time
                @window.move x,y
            else
                # Animation: Swing
                scale = 0.5 - Math.cos(time_since/time*Math::PI)/2
                ## Animation: Linear
                #scale = time_since/time
                new_x = pos[0]+(x-pos[0])*scale
                new_y = pos[1]+(y-pos[1])*scale
                @window.move new_x, new_y
                EM.next_tick anim_tick
            end
        end
        anim_tick.call
    end
    def animate_opacity opacity, time
        start = Time.new
        start_opacity = @window.get_opacity
        anim_tick = proc do
            time_since = Time.new - start
            if time_since >= time
                @window.set_opacity opacity
            else
                # Animation: Swing
                scale = 0.5 - Math.cos(time_since/time*Math::PI)/2
                ## Animation: Linear
                #scale = time_since/time
                new_opacity = start_opacity+(opacity-start_opacity)*scale
                @window.set_opacity new_opacity
                EM.next_tick anim_tick
            end
        end
        anim_tick.call
    end
end
def get_friends
end
def pubkey_to_hex key
	key.map { |a| b = "00"+a.to_s(16); b[b.length-2..-1] }.join.upcase
end
def hex_to_pubkey hex
    bits = []
    index = 0
    while index < hex.length
        bits.push hex[index..index+1]
        index += 2
    end
    bytes = bits.map { |a| a.to_i(16) }.pack("C*")
    ptr = FFI::MemoryPointer.from_string(bytes)
end

class Main < WebViewWindow
    def post_init 
        @window.resize 640,480
        erb :index
    end
end
class FriendRequest < WebViewWindow
	def post_init 
		@window.resize 320, 160
		erb :friendrequest
	end
	def accept
		Tox::Messenger::m_addfriend_norequest @config[:user_ptr]
		@window.destroy
	end
	def reject
		@window.destroy
	end
end
def update_friends
	num_friends = Tox::Messenger
end
def init
    # Set process name
    $0 = "toxin"
    # Setup window
    GirFFI.setup :WebKit, '3.0'
    Gtk.init
    puts "Failed to initialize" unless Tox::Messenger::initMessenger==0
    $pubkey = pubkey_to_hex Tox::Messenger::self_public_key.to_a
    friendrequest_callback = Proc.new { |user_id_ptr, msg_ptr, msg_size|
        user_id = pubkey_to_hex user_id_ptr.read_array_of_uint8(32)
        msg = msg_ptr.read_string msg_size

        puts "User[#{user_id}] Friend request: #{msg}"
        $request_window = FriendRequest.new({ user_id: user_id, msg: msg, user_ptr: user_id_ptr })
    }
    Tox::Messenger::m_callback_friendrequest(friendrequest_callback)
    friendmessage_callback = Proc.new { |friend_id, msg_ptr, msg_size|
        msg = msg_ptr.read_string msg_size
        puts "Friend[#{friend_id}] Message: #{msg}"
    }
    Tox::Messenger::m_callback_friendmessage(friendmessage_callback)
    namechange_callback = Proc.new { |friend_id, name_ptr, name_size|
        name = name_ptr.read_string name_size
        puts "Friend[#{friend_id}] Name change: #{name}"
    }
    Tox::Messenger::m_callback_namechange(namechange_callback)
    $name_ptr = FFI::MemoryPointer.from_string GLib.get_real_name
    Tox::Messenger::setname($name_ptr, $name_ptr.size-1)
    puts "User ID: #{$pubkey}"
    help = false
    ARGV.each do |arg|
        case arg
        when "pry"
            binding.pry
        when "help"
            help = true
        else
            puts "Unrecognized argument: #{arg}"
            help = true
        end
    end
    if ARGV.length == 0
	$main_window = Main.new
    end
    if help
        puts "usage: toxin"
        Process::exit
    end
end
def get_name_bits
    full = GLib.get_real_name
    bits = full.split ' '
    first = bits[0]
    last = bits[1..-1].join ' '
    return [first,last]
end
def addfriend key
    pubkey_ptr = hex_to_pubkey key
    msg = "Please let me be your friend."
    msg_ptr = FFI::MemoryPointer.from_string(msg)
    Tox::Messenger::m_addfriend pubkey_ptr, msg_ptr, msg_ptr.size-1
end
=begin
class HttpHost < EM::Connection
    include EM::HttpServer
    def post_init
        super
        no_environment_strings
    end
    def process_http_request
        # the http request details are available via the following instance variables:
        #   @http_protocol
        #   @http_request_method
        #   @http_cookie__filepath__ ruby
        #   @http_if_none_match
        #   @http_content_type
        #   @http_path_info
        #   @http_request_uri
        #   @http_query_string
        #   @http_post_content
        #   @http_headers
        #puts @http_request_uri
        bits = @http_request_uri.split("/")
    end
end
=end
EM::run do
    init
    Process::fork do
        Gtk.main
    end
    EM.add_periodic_timer (1.0/200.0) do
        Tox::Messenger::doMessenger
    end
    # Start Websocket
    EM::WebSocket.start(:host => "localhost", :port => 38473) do |ws|
        $connection ||= ws
	    ws.onopen { |handshake|
            puts "WebSocket connection open"

            # Access properties on the EM::WebSocket::Handshake object, e.g.
            # path, query_string, origin, headers
        }
        ws.onclose { puts "Connection closed" }
        ws.onmessage { |msg|
            puts "Received JSON: #{msg}"
            json = MultiJson.load msg
            if json["op"]=="exec_ruby"
                ws.send(MultiJson.dump({op:'callback', data:MultiJson.dump(eval(json["data"]))}))
            end
        }
    end
    #EM.start_server 'localhost', 38474, HttpHost
end
